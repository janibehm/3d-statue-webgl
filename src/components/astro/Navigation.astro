---
import { useTranslations } from "../../i18n/utils";
interface Props {
  lang: "fi" | "en";
}

const { lang } = Astro.props;
const t = useTranslations(lang);

const pathNames = {
  services: { fi: "palvelut", en: "services" },
  about: { fi: "meista", en: "about" },
  contact: { fi: "yhteydenotto", en: "contact" },
} as const;

const navItems = [
  {
    key: "nav.home",
    path: lang === "fi" ? "/" : `/${lang}`,
  },
  {
    key: "nav.about",
    path: lang === "fi" ? "/meista" : `/${lang}/${pathNames.about[lang]}`,
  },
  {
    key: "nav.services",
    path: lang === "fi" ? "/palvelut" : `/${lang}/${pathNames.services[lang]}`,
  },

  {
    key: "nav.contact",
    path: lang === "fi" ? "/yhteydenotto" : `/${lang}/${pathNames.contact[lang]}`,
  },
] as const;

const currentPath = Astro.url.pathname;
---

<nav class="side-nav" id="navigation">
  <div class="nav-header">
    <div class="nav-lang" id="navLang">
      <a
        href={currentPath.startsWith("/en") ? currentPath.replace("/en", "") : `/en${currentPath}`}
        class="nav-lang-link"
      >
        {currentPath.startsWith("/en") ? "FI" : "EN"}
      </a>
    </div>
    <div class="hamburger">
      <span></span>
      <span></span>
      <span></span>
    </div>
  </div>
  <ul>
    {
      navItems.map((item) => (
        <li>
          <a
            href={item.path}
            class:list={[
              "nav-link",
              {
                active:
                  currentPath === item.path || (currentPath === "/" && item.path === `/${lang}`),
              },
            ]}
          >
            {t(item.key)}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script>
  // Client-side interactivity
  const init = () => {
    // Remove any existing 'open' navigation menus first
    document.querySelectorAll(".side-nav.open").forEach((nav) => {
      nav.classList.remove("open");
    });

    const nav = document.getElementById("navigation");
    const hamburger = nav?.querySelector(".hamburger");

    // Update active state on navigation
    const updateActiveState = () => {
      const currentPath = window.location.pathname;
      const links = nav?.querySelectorAll(".nav-link");
      // Ensure menu is closed on navigation
      nav?.classList.remove("open");

      links?.forEach((link) => {
        if (link instanceof HTMLAnchorElement) {
          link.classList.toggle("active", link.pathname === currentPath);
        }
      });
    };

    // Toggle menu
    hamburger?.addEventListener("click", () => {
      nav?.classList.toggle("open");
    });

    // Update active state on page load and navigation
    updateActiveState();
    window.addEventListener("popstate", updateActiveState);
  };

  // Run initialization
  init();

  // Re-run initialization when Astro swaps pages
  document.addEventListener("astro:page-load", init);

  const cleanup = () => {
    const nav = document.getElementById("navigation");
    nav?.classList.remove("open");
  };

  document.addEventListener("astro:before-swap", cleanup);

  let lastY = 0;
  const navLang = document.getElementById("navLang");

  const updateButtonVisibility = (e: TouchEvent | WheelEvent) => {
    if (!navLang) return;

    let scrollingDown: boolean;

    if (e instanceof WheelEvent) {
      scrollingDown = e.deltaY > 0;
    } else if (e instanceof TouchEvent && e.touches[0]) {
      const currentY = e.touches[0].clientY;
      scrollingDown = currentY < lastY;
      lastY = currentY;
    } else {
      return;
    }

    navLang.style.opacity = scrollingDown ? "0" : "1";
    navLang.style.pointerEvents = scrollingDown ? "none" : "auto";
  };

  window.addEventListener("wheel", updateButtonVisibility, { passive: true });
  window.addEventListener("touchmove", updateButtonVisibility, { passive: true });
  window.addEventListener(
    "touchstart",
    (e) => {
      if (e.touches[0]) lastY = e.touches[0].clientY;
    },
    { passive: true },
  );
</script>

<style>
  .side-nav {
    position: fixed;
    right: 5%;
    top: 15px;
    z-index: 9999;
  }

  .side-nav ul {
    display: none;
    list-style-type: none;
    padding: 0 15px;
    margin: 0;
    width: 100%;
  }

  .hamburger {
    cursor: pointer;
    background-color: #00000080;
    padding: 10px;
    border-radius: 5px;
    display: block;
    width: fit-content;
    margin-left: auto;
  }

  @media (min-width: 768px) {
    .hamburger {
      margin-top: 3rem;
    }
  }

  .hamburger span {
    display: block;
    width: 25px;
    height: 3px;
    background-color: #ffffff;
    margin: 5px 0;
    transition: all 0.3s ease;
  }

  /* Open menu styles */
  .side-nav.open {
    background-color: rgba(0, 0, 0, 0.85);
    border-radius: 5px;
    width: 200px;
  }

  .side-nav.open ul {
    display: block;
    margin-top: 10px;
  }

  .nav-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: #ffffff;
    font-family: "Exo", sans-serif;
    font-size: 16px;
    font-weight: 700;
    transition: all 0.3s ease;
    padding: 8px 0;
  }

  .nav-link:hover {
    color: #00ff00;
  }

  .nav-link.active {
    color: rgba(255, 255, 255, 0.6);
  }

  .side-nav.open .hamburger span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .side-nav.open .hamburger span:nth-child(2) {
    opacity: 0;
  }

  .side-nav.open .hamburger span:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }

  .nav-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .nav-lang {
    padding: 10px;
    transition: opacity 0.3s ease;
  }

  .nav-lang-link {
    color: white;
    text-decoration: none;
    font-weight: bold;
  }

  .nav-lang-link:hover {
    color: #00ff00;
  }

  @media (min-width: 768px) {
    .nav-lang {
      display: none;
    }
  }
</style>
