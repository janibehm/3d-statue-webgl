---
import { useTranslations } from "../../i18n/utils";
interface Props {
  lang: "fi" | "en";
}

const { lang } = Astro.props;
const t = useTranslations(lang);

const pathNames = {
  services: { fi: "palvelut", en: "services" },
  about: { fi: "tietoa", en: "about" },
  contact: { fi: "yhteydenotto", en: "contact" },
} as const;

const navItems = [
  {
    key: "nav.home",
    path: lang === "fi" ? "/" : `/${lang}`,
  },
  {
    key: "nav.services",
    path: lang === "fi" ? "/palvelut" : `/${lang}/${pathNames.services[lang]}`,
  },
  {
    key: "nav.about",
    path: lang === "fi" ? "/tietoa" : `/${lang}/${pathNames.about[lang]}`,
  },
  {
    key: "nav.contact",
    path: lang === "fi" ? "/yhteydenotto" : `/${lang}/${pathNames.contact[lang]}`,
  },
] as const;

const currentPath = Astro.url.pathname;
const isHomePage = currentPath === "/" || currentPath === `/${lang}`;
---

<nav class={`side-nav ${isHomePage ? "is-homepage" : "mobile-view"}`} id="navigation">
  <div class="hamburger">
    <span></span>
    <span></span>
    <span></span>
  </div>
  <ul>
    {
      navItems.map((item) => (
        <li>
          <a
            href={item.path}
            class:list={[
              "nav-link",
              { active: currentPath === item.path || (isHomePage && item.path === `/${lang}`) },
            ]}
          >
            {t(item.key)}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script>
  // Client-side interactivity
  const init = () => {
    // Remove any existing 'open' navigation menus first
    document.querySelectorAll(".side-nav.open").forEach((nav) => {
      nav.classList.remove("open");
    });

    const nav = document.getElementById("navigation");
    const hamburger = nav?.querySelector(".hamburger");

    // Update active state on navigation
    const updateActiveState = () => {
      const currentPath = window.location.pathname;
      const links = nav?.querySelectorAll(".nav-link");
      // Ensure menu is closed on navigation
      nav?.classList.remove("open");

      links?.forEach((link) => {
        if (link instanceof HTMLAnchorElement) {
          link.classList.toggle("active", link.pathname === currentPath);
        }
      });
    };

    // Toggle menu
    hamburger?.addEventListener("click", () => {
      nav?.classList.toggle("open");
    });

    // Update active state on page load and navigation
    updateActiveState();
    window.addEventListener("popstate", updateActiveState);
  };

  // Run initialization
  init();

  // Re-run initialization when Astro swaps pages
  document.addEventListener("astro:page-load", init);

  const cleanup = () => {
    const nav = document.getElementById("navigation");
    nav?.classList.remove("open");
  };

  document.addEventListener("astro:before-swap", cleanup);
</script>

<style>
  /* Default styles for all pages */
  .side-nav {
    position: fixed;
    right: 5%;
    top: 5%;
    z-index: 9999;
    padding: 10px;
    pointer-events: auto;
  }

  /* Default styles for lists */
  .side-nav ul {
    list-style-type: none;
    padding: 0 15px;
    margin: 0;
    width: 100%;
  }

  /* Default hamburger styles */
  .hamburger {
    display: none;
    cursor: pointer;
    background-color: #00000080;
    padding: 10px;
    border-radius: 5px;
  }

  .hamburger span {
    display: block;
    width: 25px;
    height: 3px;
    background-color: #ffffff;
    margin: 5px 0;
    transition: all 0.3s ease;
  }

  /* Mobile view (default for all pages) */
  @media (max-width: 1024px) {
    .side-nav ul {
      display: none;
    }

    .side-nav .hamburger {
      display: block;
    }

    /* Homepage exception - still show hamburger on mobile */
    .is-homepage ul {
      display: none;
    }

    .is-homepage .hamburger {
      display: block;
    }
  }

  /* Desktop view (1024px and above) */
  @media (min-width: 1024px) {
    /* Homepage specific */
    .is-homepage ul {
      display: block;
    }

    .is-homepage .hamburger {
      display: none;
    }

    /* Other pages - always show hamburger */
    .mobile-view ul {
      display: none;
    }

    .mobile-view .hamburger {
      display: block;
    }
  }

  /* Open menu styles */
  .side-nav.open {
    background-color: rgba(0, 0, 0, 0.85);
    border-radius: 5px;
    width: 200px;
    min-width: 200px;
  }

  .side-nav.open ul {
    display: block;
    margin-top: 10px;
  }

  .side-nav.open .nav-link {
    padding: 8px 0;
  }

  .side-nav.open .nav-link::before {
    display: none;
  }

  .side-nav li {
    margin: 15px 0;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    width: 100%;
  }

  .nav-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: #ffffff;
    font-family: "Exo", sans-serif;
    font-style: normal;
    font-size: 16px;
    font-weight: 700;
    transition: all 0.3s ease;
    min-width: 120px;
  }

  .nav-link::before {
    content: "";
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #ffffff;
    margin-right: 10px;
    transition: all 0.3s ease;
    position: absolute;
    left: 0;
  }

  .nav-link:hover::before {
    width: 14px;
    height: 14px;
    background-color: #00ff00;
  }

  .nav-link:hover {
    color: #00ff00;
  }

  .nav-link.active {
    color: rgba(255, 255, 255, 0.6);
  }

  .nav-link.active::before {
    background-color: #ffffff99;
    width: 14px;
    height: 14px;
  }

  .mobile-view .hamburger {
    display: block;
  }

  .mobile-view ul {
    display: none;
  }

  .side-nav.open .hamburger span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .side-nav.open .hamburger span:nth-child(2) {
    opacity: 0;
  }

  .side-nav.open .hamburger span:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }

  .mobile-view .nav-link::before {
    display: none;
  }

  .mobile-view .nav-link {
    padding: 8px 0;
  }
</style>
