---
import { useTranslations, getLangFromUrl } from "../../i18n/utils";
import { NavLang } from "../../i18n/navTranslations";

interface Props {
  translationKey: keyof (typeof NavLang)["en"];
}

const { translationKey } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<span class="translation" data-key={translationKey}></span>

<span data-translation-key={translationKey} class="translated-text">
  {t(translationKey)}
</span>

<script define:vars={{ NavLang }}>
  if (!window.translationListenerAdded) {
    window.translationListenerAdded = true;

    window.addEventListener("languageChange", (e) => {
      const { lang } = e.detail;
      document.querySelectorAll(".translated-text").forEach((element) => {
        const key = element.getAttribute("data-translation-key");
        if (key && lang in NavLang && key in NavLang[lang]) {
          const translation = NavLang[lang][key];
          element.textContent = translation;
        } else {
          console.warn(`Translation missing for key: ${key} in language: ${lang}`);
        }
      });
    });
  }
</script>

<script>
  /*   function updateTranslations(lang: string) {
    document.querySelectorAll(".translation").forEach((elem) => {
      const key = elem.getAttribute("data-key");
      // Get translation from your translations object
      // You'll need to import or load your translations here
      elem.textContent = getTranslation(key, lang);
    });
  }

  // Listen for language changes
  window.addEventListener("languageChange", (event: any) => {
    updateTranslations(event.detail.lang);
  }); */

  // Initial load
  const savedLang = localStorage.getItem("preferredLanguage") || "fi";
  /*   updateTranslations(savedLang); */
</script>

<script>
  declare global {
    interface WindowEventMap {
      languageChange: CustomEvent<{ lang: string }>;
    }
    interface Window {
      translationListenerAdded?: boolean;
    }
  }
</script>
